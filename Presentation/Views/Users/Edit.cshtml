@{
    ViewData["Title"]= ViewBag.Id!=null ? "Edit User" : "Add User";

    <style>
       
    </style>
}

<section id='users-edit'>
    <form class=''>
        <div class="d-flex align-items-center justify-content-between mb-3">
            <h1 class="fs-2">{{ isEditMode ? "Edit User" : "Add User" }}</h1>
            <div class="d-flex align-items-center gap-3 justify-content-end">
                <a href='/Users/Index' class='btn btn-outline-secondary'>Cancel</a>
                <button :disabled='!(v$ && v$.$anyDirty) || v$.$invalid' type="button" @@click='submitForm' class='btn btn-primary'>Save</button>
            </div>
        </div>
         <div class='d-flex gap-4'>
            <fieldset class="flex-grow-1">
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">First Name</label>
                    <input @@blur='touchField("firstName")' v-model='userForm.firstName' type="text" class="form-control w-100" id="exampleInputEmail1" aria-describedby="emailHelp">
                    <span v-if='v$ && v$.firstName.$error' id="emailHelp" class="text-danger small">{{v$.firstName.$errors[0].$message}}</span>
                </div>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Last Name</label>
                    <input  @@blur='touchField("lastName")' v-model='userForm.lastName' type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                    <span v-if='v$ && v$.lastName.$error' id="emailHelp" class="text-danger small">{{v$.lastName.$errors[0].$message}}</span>
                </div>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Email address</label>
                    <input @@blur='touchField("email")' v-model='userForm.email' type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                    <span v-if='v$ && v$.email.$error' id="emailHelp" class="text-danger small">{{v$.email.$errors[0].$message}}</span>
                </div>
            </fieldset>
            <div class="flex-grow-1 d-flex flex-column">
                <image-uploader :image-preview='imagePreview' @@imageChange="updateImage"></image-uploader>
            </div>
        </div>
    </form>
</section>

@section Scripts {
    <script type='module'>
        import { ImageUploader } from '/js/components/image-uploader.js';
        const { useVuelidate } = window.Vuelidate;
        const { required, email, minLength , maxLength} = window.VuelidateValidators;

        var UsersEdit= Vue.createApp({
            components:{
                ImageUploader
            },
            data() {
                return {
                  userForm: {
                    firstName:'',
                    lastName:'',
                    email:'',
                    image:null
                  },
                  rules: {
                    firstName: {required, minLength: minLength(3), maxLength: maxLength(20)},
                    lastName:{required, minLength: minLength(3), maxLength: maxLength(20)},
                    email: {required, email},
                    image:{}
                  },
                  v$:null,
                  userId:null,
                  imagePreview: null,
                  isImageUpdated: false
                };
            },
            computed:{
                isEditMode(){
                    return this.userId ? true : false;
                }
            },
            methods: {
                touchField(fieldName){
                    this.v$[fieldName].$touch()
                },
                submitForm(){
                    if(this.isEditMode){
                        this.updateUserAsync();
                    }else{
                        this.createUserAsync();
                    }
                },
                createUserAsync(){
                    this.v$.$validate();
                    if(this.v$.$error) return;
                    axios.post('/Users/Create',this.userForm)
                    .then(resp=>{
                        console.log('added successfully');
                        Swal.fire('Created!',"User has been created",'success')
                        .then(()=>{
                            this.navigateToUsersPage();
                        });
                    });
                },
                navigateToUsersPage(){
                    window.location.href=`/Users/Index`; 
                },
                fetchUser(id){
                    loader.show();
                    axios.get(`/Users/GetById/${id}`)
                    .then(resp=>{
                        this.fillFormWithUserInfo(resp.data.responseData);
                        loader.hide();
                    })
                    .catch(error=>{
                        this.navigateToUsersPage();
                        loader.hide();
                    })
                },
                fillFormWithUserInfo(user){
                    this.userForm.firstName=user.firstName;
                    this.userForm.lastName=user.lastName;
                    this.userForm.email=user.email;
                    this.imagePreview=user.image;
                },
                updateUserAsync(){
                    axios.put(`/Users/Update/${this.userId}`,{
                        ...this.userForm,
                        isImageUpdated: this.isImageUpdated
                    })
                    .then(resp=>{
                        Swal.fire('Updated!',"User has been updated",'success')
                         .then(()=>{
                            this.navigateToUsersPage();
                        });
                    });
                },
                updateImage(imageBase64){
                    this.isImageUpdated=true;
                    this.userForm.image = imageBase64;
                }
            },
            mounted() {
                this.v$ = useVuelidate(this.rules,this.userForm);

                this.userId = '@(ViewBag.Id)';
                if(this.isEditMode){
                   this.fetchUser(this.userId);
                }
            }
        }).mount("#users-edit");
    </script>
}